"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../common/decorators");
class IPService {
    constructor($config, $httpClient, $logger) {
        this.$config = $config;
        this.$httpClient = $httpClient;
        this.$logger = $logger;
    }
    getCurrentIPv4Address() {
        return __awaiter(this, void 0, void 0, function* () {
            const ipAddress = (yield this.getIPAddressFromServiceReturningJSONWithIPProperty(this.$config.WHOAMI_URL_ENDPOINT)) ||
                (yield this.getIPAddressFromServiceReturningJSONWithIPProperty("https://api.myip.com")) ||
                (yield this.getIPAddressFromIpifyOrgAPI()) ||
                null;
            return ipAddress;
        });
    }
    getIPAddressFromServiceReturningJSONWithIPProperty(apiEndpoint) {
        return __awaiter(this, void 0, void 0, function* () {
            let ipAddress = null;
            try {
                const response = yield this.$httpClient.httpRequest({
                    method: "GET",
                    url: apiEndpoint,
                    timeout: IPService.GET_IP_TIMEOUT
                });
                this.$logger.trace(`${apiEndpoint} returns ${response.body}`);
                const jsonData = JSON.parse(response.body);
                ipAddress = jsonData.ip;
            }
            catch (err) {
                this.$logger.trace(`Unable to get information about current IP Address from ${apiEndpoint} Error is:`, err);
            }
            return ipAddress;
        });
    }
    getIPAddressFromIpifyOrgAPI() {
        return __awaiter(this, void 0, void 0, function* () {
            const ipifyOrgAPIEndpoint = "https://api.ipify.org";
            let ipAddress = null;
            try {
                const response = yield this.$httpClient.httpRequest({
                    method: "GET",
                    url: ipifyOrgAPIEndpoint,
                    timeout: IPService.GET_IP_TIMEOUT
                });
                this.$logger.trace(`${ipifyOrgAPIEndpoint} returns ${response.body}`);
                ipAddress = (response.body || '').toString();
            }
            catch (err) {
                this.$logger.trace(`Unable to get information about current IP Address from ${ipifyOrgAPIEndpoint} Error is:`, err);
            }
            return ipAddress;
        });
    }
}
IPService.GET_IP_TIMEOUT = 1000;
__decorate([
    decorators_1.cache()
], IPService.prototype, "getCurrentIPv4Address", null);
exports.IPService = IPService;
$injector.register("ipService", IPService);
