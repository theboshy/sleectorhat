"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers = require("../common/helpers");
const path = require("path");
const os_1 = require("os");
const constants_1 = require("../constants");
const MARKING_MODE_PROP = "markingMode";
const MARKING_MODE_FULL_DEPRECATION_MSG = `With the upcoming NativeScript 7.0 the "${MARKING_MODE_PROP}:${"none"}" will become the only marking mode supported by the Android Runtime.`;
const MARKING_MODE_NONE_CONFIRM_MSG = `Do you want to switch your app to the recommended "${MARKING_MODE_PROP}:${"none"}"?
More info about the reasons for this change can be found in the link below:
https://www.nativescript.org/blog/markingmode-none-is-official-boost-android-performance-while-avoiding-memory-issues`;
class MarkingModeService {
    constructor($fs, $logger, $projectDataService, $prompter) {
        this.$fs = $fs;
        this.$logger = $logger;
        this.$projectDataService = $projectDataService;
        this.$prompter = $prompter;
    }
    handleMarkingModeFullDeprecation(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { projectDir, skipWarnings, forceSwitch } = options;
            const projectData = this.$projectDataService.getProjectData(projectDir);
            const innerPackageJsonPath = path.join(projectData.getAppDirectoryPath(projectDir), constants_1.PACKAGE_JSON_FILE_NAME);
            if (!this.$fs.exists(innerPackageJsonPath)) {
                return;
            }
            const innerPackageJson = this.$fs.readJson(innerPackageJsonPath);
            let markingModeValue = (innerPackageJson && innerPackageJson.android
                && typeof (innerPackageJson.android[MARKING_MODE_PROP]) === "string" && innerPackageJson.android[MARKING_MODE_PROP]) || "";
            if (forceSwitch) {
                this.setMarkingMode(innerPackageJsonPath, innerPackageJson, "none");
                return;
            }
            if (!markingModeValue && helpers.isInteractive()) {
                this.$logger.info();
                this.$logger.printMarkdown(`
__Improve your app by switching to "${MARKING_MODE_PROP}:${"none"}".__

\`${MARKING_MODE_FULL_DEPRECATION_MSG}\``);
                const hasSwitched = yield this.$prompter.confirm(MARKING_MODE_NONE_CONFIRM_MSG, () => true);
                markingModeValue = hasSwitched ? "none" : "full";
                this.setMarkingMode(innerPackageJsonPath, innerPackageJson, markingModeValue);
            }
            if (!skipWarnings && markingModeValue.toLowerCase() !== "none") {
                this.showMarkingModeFullWarning();
            }
        });
    }
    setMarkingMode(packagePath, packageValue, newMode) {
        packageValue = packageValue || {};
        packageValue.android = packageValue.android || {};
        packageValue.android[MARKING_MODE_PROP] = newMode;
        this.$fs.writeJson(packagePath, packageValue);
    }
    showMarkingModeFullWarning() {
        const markingModeFullWarning = `You are using the deprecated "${MARKING_MODE_PROP}:${"full"}".${os_1.EOL}${os_1.EOL}${MARKING_MODE_FULL_DEPRECATION_MSG}${os_1.EOL}${os_1.EOL}You should update your marking mode by executing 'tns update --markingMode'.`;
        this.$logger.warn(markingModeFullWarning, { [constants_1.LoggerConfigData.wrapMessageWithBorders]: true });
    }
}
exports.MarkingModeService = MarkingModeService;
$injector.register("markingModeService", MarkingModeService);
