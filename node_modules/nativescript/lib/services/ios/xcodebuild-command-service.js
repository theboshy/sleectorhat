"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants = require("../../constants");
class XcodebuildCommandService {
    constructor($childProcess, $errors, $logger) {
        this.$childProcess = $childProcess;
        this.$errors = $errors;
        this.$logger = $logger;
    }
    executeCommand(args, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { message, cwd, stdio, spawnOptions } = options;
            this.$logger.info(message || "Xcode build...");
            const childProcessOptions = { cwd, stdio: stdio || "inherit" };
            try {
                const commandResult = yield this.$childProcess.spawnFromEvent("xcodebuild", args, "exit", childProcessOptions, spawnOptions || { emitOptions: { eventName: constants.BUILD_OUTPUT_EVENT_NAME }, throwError: true });
                return commandResult;
            }
            catch (err) {
                this.$errors.fail(err.message);
            }
        });
    }
}
exports.XcodebuildCommandService = XcodebuildCommandService;
$injector.register("xcodebuildCommandService", XcodebuildCommandService);
