"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const mobileProvisionFinder = require("ios-mobileprovision-finder");
class ExportOptionsPlistService {
    constructor($fs, $tempService) {
        this.$fs = $fs;
        this.$tempService = $tempService;
    }
    createDevelopmentExportOptionsPlist(archivePath, projectData, buildConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const exportOptionsMethod = this.getExportOptionsMethod(projectData, archivePath);
            const provision = buildConfig.provision || buildConfig.mobileProvisionIdentifier;
            const iCloudContainerEnvironment = buildConfig.iCloudContainerEnvironment;
            let plistTemplate = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
	<string>${exportOptionsMethod}</string>`;
            if (provision) {
                plistTemplate += `    <key>provisioningProfiles</key>
<dict>
	<key>${projectData.projectIdentifiers.ios}</key>
	<string>${provision}</string>
</dict>`;
            }
            plistTemplate += `
    <key>uploadBitcode</key>
    <false/>
    <key>compileBitcode</key>
    <false/>`;
            if (iCloudContainerEnvironment) {
                plistTemplate += `
    <key>iCloudContainerEnvironment</key>
    <string>${iCloudContainerEnvironment}</string>`;
            }
            plistTemplate += `
</dict>
</plist>`;
            const exportOptionsPlistFilePath = yield this.$tempService.path({ prefix: "export-", suffix: ".plist" });
            this.$fs.writeFile(exportOptionsPlistFilePath, plistTemplate);
            const exportFileDir = path.resolve(path.dirname(archivePath));
            const exportFilePath = path.join(exportFileDir, projectData.projectName + ".ipa");
            return { exportFileDir, exportFilePath, exportOptionsPlistFilePath };
        });
    }
    createDistributionExportOptionsPlist(archivePath, projectData, buildConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const provision = buildConfig.provision || buildConfig.mobileProvisionIdentifier;
            const teamId = buildConfig.teamId;
            let plistTemplate = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
`;
            if (teamId) {
                plistTemplate += `    <key>teamID</key>
    <string>${teamId}</string>
`;
            }
            if (provision) {
                plistTemplate += `    <key>provisioningProfiles</key>
    <dict>
        <key>${projectData.projectIdentifiers.ios}</key>
        <string>${provision}</string>
    </dict>`;
            }
            plistTemplate += `    <key>method</key>
    <string>app-store</string>
    <key>uploadBitcode</key>
    <false/>
    <key>compileBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <false/>
</dict>
</plist>`;
            const exportOptionsPlistFilePath = yield this.$tempService.path({ prefix: "export-", suffix: ".plist" });
            this.$fs.writeFile(exportOptionsPlistFilePath, plistTemplate);
            const exportFileDir = path.resolve(path.dirname(archivePath));
            const exportFilePath = path.join(exportFileDir, projectData.projectName + ".ipa");
            return { exportFileDir, exportFilePath, exportOptionsPlistFilePath };
        });
    }
    getExportOptionsMethod(projectData, archivePath) {
        const embeddedMobileProvisionPath = path.join(archivePath, 'Products', 'Applications', `${projectData.projectName}.app`, "embedded.mobileprovision");
        const provision = mobileProvisionFinder.provision.readFromFile(embeddedMobileProvisionPath);
        return {
            "Development": "development",
            "AdHoc": "ad-hoc",
            "Distribution": "app-store",
            "Enterprise": "enterprise"
        }[provision.Type];
    }
}
exports.ExportOptionsPlistService = ExportOptionsPlistService;
$injector.register("exportOptionsPlistService", ExportOptionsPlistService);
