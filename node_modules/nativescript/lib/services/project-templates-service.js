"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const constants = require("../constants");
const util_1 = require("util");
const decorators_1 = require("../common/decorators");
class ProjectTemplatesService {
    constructor($analyticsService, $fs, $logger, $packageInstallationManager, $pacoteService, $errors, $packageManager) {
        this.$analyticsService = $analyticsService;
        this.$fs = $fs;
        this.$logger = $logger;
        this.$packageInstallationManager = $packageInstallationManager;
        this.$pacoteService = $pacoteService;
        this.$errors = $errors;
        this.$packageManager = $packageManager;
        this.templatePackageContents = {};
    }
    prepareTemplate(templateValue, projectDir) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!templateValue) {
                templateValue = constants.RESERVED_TEMPLATE_NAMES["default"];
            }
            const templateNameParts = yield this.$packageManager.getPackageNameParts(templateValue);
            templateValue = constants.RESERVED_TEMPLATE_NAMES[templateNameParts.name] || templateNameParts.name;
            const version = templateNameParts.version || (yield this.$packageInstallationManager.getLatestCompatibleVersionSafe(templateValue));
            const fullTemplateName = yield this.$packageManager.getPackageFullName({ name: templateValue, version: version });
            const templatePackageJsonContent = yield this.getTemplatePackageJsonContent(fullTemplateName);
            const templateVersion = yield this.getTemplateVersion(fullTemplateName);
            let templatePath = null;
            if (templateVersion === constants.TemplateVersions.v1) {
                templatePath = yield this.prepareNativeScriptTemplate(templateValue, version, projectDir);
                this.$fs.deleteDirectory(path.join(templatePath, constants.NODE_MODULES_FOLDER_NAME));
            }
            const templateNameToBeTracked = this.getTemplateNameToBeTracked(templateValue, templatePackageJsonContent);
            if (templateNameToBeTracked) {
                yield this.$analyticsService.trackEventActionInGoogleAnalytics({
                    action: "Create project",
                    isForDevice: null,
                    additionalData: templateNameToBeTracked
                });
                yield this.$analyticsService.trackEventActionInGoogleAnalytics({
                    action: "Using Template",
                    additionalData: `${templateNameToBeTracked}${constants.AnalyticsEventLabelDelimiter}${templateVersion}`
                });
            }
            return { templateName: templateValue, templatePath, templateVersion, templatePackageJsonContent, version };
        });
    }
    getTemplateVersion(templateName) {
        return __awaiter(this, void 0, void 0, function* () {
            const packageJsonContent = yield this.getTemplatePackageJsonContent(templateName);
            const templateVersionFromPackageJson = packageJsonContent && packageJsonContent.nativescript && packageJsonContent.nativescript.templateVersion;
            if (templateVersionFromPackageJson) {
                this.$logger.trace(`The template ${templateName} has version ${templateVersionFromPackageJson}.`);
                if (_.values(constants.TemplateVersions).indexOf(templateVersionFromPackageJson) === -1) {
                    this.$errors.fail(util_1.format(constants.ProjectTemplateErrors.InvalidTemplateVersionStringFormat, templateName, templateVersionFromPackageJson));
                }
                return templateVersionFromPackageJson;
            }
            return constants.TemplateVersions.v1;
        });
    }
    getTemplatePackageJsonContent(templateName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.templatePackageContents[templateName]) {
                this.templatePackageContents[templateName] = yield this.$pacoteService.manifest(templateName, { fullMetadata: true });
            }
            return this.templatePackageContents[templateName];
        });
    }
    prepareNativeScriptTemplate(templateName, version, projectDir) {
        return __awaiter(this, void 0, void 0, function* () {
            this.$logger.trace(`Using NativeScript verified template: ${templateName} with version ${version}.`);
            return this.$packageInstallationManager.install(templateName, projectDir, { version: version, dependencyType: "save" });
        });
    }
    getTemplateNameToBeTracked(templateName, packageJsonContent) {
        try {
            if (this.$fs.exists(templateName)) {
                const templateNameToBeTracked = (packageJsonContent && packageJsonContent.name) || path.basename(templateName);
                return `${constants.ANALYTICS_LOCAL_TEMPLATE_PREFIX}${templateNameToBeTracked}`;
            }
            return templateName;
        }
        catch (err) {
            this.$logger.trace(`Unable to get template name to be tracked, error is: ${err}`);
        }
    }
}
__decorate([
    decorators_1.performanceLog()
], ProjectTemplatesService.prototype, "prepareTemplate", null);
exports.ProjectTemplatesService = ProjectTemplatesService;
$injector.register("projectTemplatesService", ProjectTemplatesService);
