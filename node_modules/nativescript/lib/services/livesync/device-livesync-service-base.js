"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../../common/decorators");
const path = require("path");
const decorators_2 = require("../../common/decorators");
class DeviceLiveSyncServiceBase {
    constructor(platformsDataService, device) {
        this.platformsDataService = platformsDataService;
        this.device = device;
    }
    canExecuteFastSync(liveSyncResult, filePath, projectData, platform) {
        const fastSyncFileExtensions = this.getFastLiveSyncFileExtensions(platform, projectData);
        return liveSyncResult.useHotModuleReload || _.includes(fastSyncFileExtensions, path.extname(filePath));
    }
    canExecuteFastSyncForPaths(liveSyncResult, localToDevicePaths, projectData, platform) {
        return !_.some(localToDevicePaths, (localToDevicePath) => !this.canExecuteFastSync(liveSyncResult, localToDevicePath.getLocalPath(), projectData, this.device.deviceInfo.platform));
    }
    getFastLiveSyncFileExtensions(platform, projectData) {
        const platformData = this.platformsDataService.getPlatformData(platform, projectData);
        const fastSyncFileExtensions = DeviceLiveSyncServiceBase.FAST_SYNC_FILE_EXTENSIONS.concat(platformData.fastLivesyncFileExtensions);
        return fastSyncFileExtensions;
    }
    transferFiles(deviceAppData, localToDevicePaths, projectFilesPath, projectData, liveSyncDeviceDescriptor, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let transferredFiles = [];
            if (options.isFullSync) {
                transferredFiles = yield this.device.fileSystem.transferDirectory(deviceAppData, localToDevicePaths, projectFilesPath);
            }
            else {
                transferredFiles = yield this.device.fileSystem.transferFiles(deviceAppData, localToDevicePaths);
            }
            return transferredFiles;
        });
    }
    finalizeSync(liveSyncInfo, projectData) {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                didRefresh: true,
                operationId: ""
            };
        });
    }
}
DeviceLiveSyncServiceBase.FAST_SYNC_FILE_EXTENSIONS = [".css", ".xml", ".html"];
__decorate([
    decorators_1.cache()
], DeviceLiveSyncServiceBase.prototype, "getFastLiveSyncFileExtensions", null);
__decorate([
    decorators_2.performanceLog()
], DeviceLiveSyncServiceBase.prototype, "transferFiles", null);
exports.DeviceLiveSyncServiceBase = DeviceLiveSyncServiceBase;
