"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const helpers_1 = require("../helpers");
const constants_1 = require("../../constants");
class PreUninstallCommand {
    constructor($analyticsService, $extensibilityService, $fs, $opener, $packageInstallationManager, $settingsService) {
        this.$analyticsService = $analyticsService;
        this.$extensibilityService = $extensibilityService;
        this.$fs = $fs;
        this.$opener = $opener;
        this.$packageInstallationManager = $packageInstallationManager;
        this.$settingsService = $settingsService;
        this.allowedParameters = [];
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const isIntentionalUninstall = helpers_1.doesCurrentNpmCommandMatch([/^uninstall$/, /^remove$/, /^rm$/, /^r$/, /^un$/, /^unlink$/]);
            yield this.$analyticsService.trackEventActionInGoogleAnalytics({
                action: "Uninstall CLI",
                additionalData: `isIntentionalUninstall${constants_1.AnalyticsEventLabelDelimiter}${isIntentionalUninstall}${constants_1.AnalyticsEventLabelDelimiter}isInteractive${constants_1.AnalyticsEventLabelDelimiter}${!!helpers_1.isInteractive()}`
            });
            if (isIntentionalUninstall) {
                yield this.handleIntentionalUninstall();
            }
            this.$fs.deleteFile(path.join(this.$settingsService.getProfileDir(), "KillSwitches", "cli"));
            yield this.$analyticsService.finishTracking();
        });
    }
    handleIntentionalUninstall() {
        return __awaiter(this, void 0, void 0, function* () {
            this.$extensibilityService.removeAllExtensions();
            this.$packageInstallationManager.clearInspectorCache();
            yield this.handleFeedbackForm();
        });
    }
    handleFeedbackForm() {
        return __awaiter(this, void 0, void 0, function* () {
            if (helpers_1.isInteractive()) {
                this.$opener.open(PreUninstallCommand.FEEDBACK_FORM_URL);
            }
        });
    }
}
PreUninstallCommand.FEEDBACK_FORM_URL = "https://www.nativescript.org/uninstall-feedback";
exports.PreUninstallCommand = PreUninstallCommand;
$injector.registerCommand("dev-preuninstall", PreUninstallCommand);
