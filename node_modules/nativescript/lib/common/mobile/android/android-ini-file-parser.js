"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../constants");
const iconv = require("iconv-lite");
class AndroidIniFileParser {
    constructor($fs) {
        this.$fs = $fs;
        iconv.extendNodeEncodings();
    }
    parseIniFile(iniFilePath) {
        if (!this.$fs.exists(iniFilePath)) {
            return null;
        }
        const encoding = this.getAvdEncoding(iniFilePath);
        const contents = this.$fs.readText(iniFilePath, encoding).split("\n");
        return _.reduce(contents, (result, line) => {
            const parsedLine = line.split("=");
            const key = parsedLine[0];
            switch (key) {
                case "target":
                    result.target = parsedLine[1];
                    result.targetNum = this.readTargetNum(result.target);
                    break;
                case "path":
                case "AvdId":
                    result[_.lowerFirst(key)] = parsedLine[1];
                    break;
                case "hw.device.name":
                    result.device = parsedLine[1];
                    break;
                case "avd.ini.displayname":
                    result.displayName = parsedLine[1];
                    break;
                case "abi.type":
                case "skin.name":
                case "sdcard.size":
                    result[key.split(".")[0]] = parsedLine[1];
                    break;
            }
            return result;
        }, Object.create(null));
    }
    getAvdEncoding(avdName) {
        let encoding = "utf8";
        let contents = this.$fs.readText(avdName, "ascii");
        if (contents.length > 0) {
            contents = contents.split("\n", 1)[0];
            if (contents.length > 0) {
                const matches = contents.match(constants_1.AndroidVirtualDevice.ENCODING_MASK);
                if (matches) {
                    encoding = matches[1];
                }
            }
        }
        return encoding;
    }
    readTargetNum(target) {
        const platform = target.replace('android-', '');
        let platformNumber = +platform;
        if (isNaN(platformNumber)) {
            const googlePlatform = target.split(":")[2];
            if (googlePlatform) {
                platformNumber = +googlePlatform;
            }
            else if (platform === "L") {
                platformNumber = 20;
            }
            else if (platform === "MNC") {
                platformNumber = 22;
            }
        }
        return platformNumber;
    }
}
exports.AndroidIniFileParser = AndroidIniFileParser;
$injector.register("androidIniFileParser", AndroidIniFileParser);
