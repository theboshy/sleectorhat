"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../common/constants");
class PreviewCommand {
    constructor($analyticsService, $errors, $logger, $migrateController, $previewAppController, $networkConnectivityValidator, $projectData, $options, $previewAppLogProvider, $previewQrCodeService, $cleanupService, $markingModeService) {
        this.$analyticsService = $analyticsService;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$migrateController = $migrateController;
        this.$previewAppController = $previewAppController;
        this.$networkConnectivityValidator = $networkConnectivityValidator;
        this.$projectData = $projectData;
        this.$options = $options;
        this.$previewAppLogProvider = $previewAppLogProvider;
        this.$previewQrCodeService = $previewQrCodeService;
        this.$markingModeService = $markingModeService;
        this.allowedParameters = [];
        this.$analyticsService.setShouldDispose(false);
        $cleanupService.setShouldDispose(false);
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$markingModeService.handleMarkingModeFullDeprecation({ projectDir: this.$projectData.projectDir, skipWarnings: true });
            this.$previewAppLogProvider.on(constants_1.DEVICE_LOG_EVENT_NAME, (deviceId, message) => {
                this.$logger.info(message);
            });
            yield this.$previewAppController.startPreview({
                projectDir: this.$projectData.projectDir,
                useHotModuleReload: this.$options.hmr,
                env: this.$options.env
            });
            yield this.$previewQrCodeService.printLiveSyncQrCode({
                projectDir: this.$projectData.projectDir,
                useHotModuleReload: this.$options.hmr,
                link: this.$options.link
            });
        });
    }
    canExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args && args.length) {
                this.$errors.failWithHelp(`The ${args.length > 1 ? "arguments" : "argument"} '${args.join(" ")}' ${args.length > 1 ? "are" : "is"} not valid for the preview command.`);
            }
            if (!this.$options.force) {
                yield this.$migrateController.validate({ projectDir: this.$projectData.projectDir, platforms: [] });
            }
            yield this.$networkConnectivityValidator.validate();
            return true;
        });
    }
}
exports.PreviewCommand = PreviewCommand;
$injector.registerCommand("preview", PreviewCommand);
