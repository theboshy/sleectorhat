"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const command_base_1 = require("./command-base");
const helpers_1 = require("../common/helpers");
class DeployOnDeviceCommand extends command_base_1.ValidatePlatformCommandBase {
    constructor($platformValidationService, $platformCommandParameter, $options, $projectData, $errors, $mobileHelper, $platformsDataService, $deployCommandHelper, $markingModeService, $migrateController) {
        super($options, $platformsDataService, $platformValidationService, $projectData);
        this.$platformCommandParameter = $platformCommandParameter;
        this.$errors = $errors;
        this.$mobileHelper = $mobileHelper;
        this.$deployCommandHelper = $deployCommandHelper;
        this.$markingModeService = $markingModeService;
        this.$migrateController = $migrateController;
        this.allowedParameters = [];
        this.dashedOptions = {
            watch: { type: "boolean", default: false, hasSensitiveValue: false },
            hmr: { type: "boolean", default: false, hasSensitiveValue: false },
        };
        this.$projectData.initializeProjectData();
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const platform = args[0];
            if (this.$mobileHelper.isAndroidPlatform(platform)) {
                yield this.$markingModeService.handleMarkingModeFullDeprecation({ projectDir: this.$projectData.projectDir, skipWarnings: true });
            }
            yield this.$deployCommandHelper.deploy(platform);
        });
    }
    canExecute(args) {
        const _super = Object.create(null, {
            canExecuteCommandBase: { get: () => super.canExecuteCommandBase }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const platform = args[0];
            if (!this.$options.force) {
                yield this.$migrateController.validate({ projectDir: this.$projectData.projectDir, platforms: [platform] });
            }
            if (!args || !args.length || args.length > 1) {
                return false;
            }
            if (!(yield this.$platformCommandParameter.validate(platform))) {
                return false;
            }
            if (this.$mobileHelper.isAndroidPlatform(platform) && (this.$options.release || this.$options.aab) && !helpers_1.hasValidAndroidSigning(this.$options)) {
                if (this.$options.release) {
                    this.$errors.failWithHelp(constants_1.ANDROID_RELEASE_BUILD_ERROR_MESSAGE);
                }
                else {
                    this.$errors.failWithHelp(constants_1.ANDROID_APP_BUNDLE_SIGNING_ERROR_MESSAGE);
                }
            }
            const result = yield _super.canExecuteCommandBase.call(this, platform, { validateOptions: true });
            return result;
        });
    }
}
exports.DeployOnDeviceCommand = DeployOnDeviceCommand;
$injector.registerCommand("deploy", DeployOnDeviceCommand);
