"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const decorators_1 = require("./common/decorators");
const nativescript_doctor_1 = require("nativescript-doctor");
class AndroidToolsInfo {
    constructor($errors, $logger, $options, $staticConfig) {
        this.$errors = $errors;
        this.$logger = $logger;
        this.$options = $options;
        this.$staticConfig = $staticConfig;
    }
    getToolsInfo(config) {
        const infoData = (nativescript_doctor_1.androidToolsInfo.getToolsInfo({ projectDir: config.projectDir }));
        infoData.androidHomeEnvVar = nativescript_doctor_1.androidToolsInfo.androidHome;
        infoData.compileSdkVersion = this.getCompileSdkVersion(infoData.installedTargets, infoData.compileSdkVersion);
        infoData.targetSdkVersion = this.getTargetSdk(infoData.compileSdkVersion);
        infoData.generateTypings = this.shouldGenerateTypings();
        this.$logger.trace("Installed Android Targets are: ", infoData.installedTargets);
        this.$logger.trace("Selected buildToolsVersion is:", infoData.buildToolsVersion);
        return infoData;
    }
    validateInfo(options) {
        let detectedErrors = false;
        const showWarningsAsErrors = options && options.showWarningsAsErrors;
        const isAndroidHomeValid = this.validateAndroidHomeEnvVariable(options);
        detectedErrors = nativescript_doctor_1.androidToolsInfo.validateInfo({ projectDir: options.projectDir }).map(warning => this.printMessage(warning.warning, showWarningsAsErrors)).length > 0;
        if (options && options.validateTargetSdk) {
            detectedErrors = this.validateTargetSdk(options);
        }
        return detectedErrors || !isAndroidHomeValid;
    }
    validateTargetSdk(options) {
        let detectedErrors = false;
        const toolsInfoData = this.getToolsInfo({ projectDir: options.projectDir });
        const targetSdk = toolsInfoData.targetSdkVersion;
        detectedErrors = nativescript_doctor_1.androidToolsInfo.validateMinSupportedTargetSdk({ targetSdk, projectDir: options.projectDir }).map(warning => this.printMessage(warning.warning, options.showWarningsAsErrors)).length > 0;
        if (!detectedErrors) {
            nativescript_doctor_1.androidToolsInfo.validataMaxSupportedTargetSdk({ targetSdk, projectDir: options.projectDir }).map(warning => this.$logger.warn(warning.warning));
        }
        return detectedErrors;
    }
    validateJavacVersion(installedJavacVersion, options) {
        const showWarningsAsErrors = options && options.showWarningsAsErrors;
        return nativescript_doctor_1.androidToolsInfo.validateJavacVersion(installedJavacVersion).map(warning => this.printMessage(warning.warning, showWarningsAsErrors)).length > 0;
    }
    getPathToAdbFromAndroidHome() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return nativescript_doctor_1.androidToolsInfo.getPathToAdbFromAndroidHome();
            }
            catch (err) {
                this.$logger.trace(`Error while executing '${path.join(nativescript_doctor_1.androidToolsInfo.androidHome, "platform-tools", "adb")} help'. Error is: ${err.message}`);
            }
            return null;
        });
    }
    validateAndroidHomeEnvVariable(options) {
        const showWarningsAsErrors = options && options.showWarningsAsErrors;
        return nativescript_doctor_1.androidToolsInfo.validateAndroidHomeEnvVariable().map(warning => this.printMessage(warning.warning, showWarningsAsErrors)).length > 0;
    }
    shouldGenerateTypings() {
        return this.$options.androidTypings;
    }
    printMessage(msg, showWarningsAsErrors) {
        if (showWarningsAsErrors) {
            this.$errors.fail(msg);
        }
        else {
            this.$logger.warn(msg);
        }
    }
    getCompileSdkVersion(installedTargets, latestCompileSdk) {
        const userSpecifiedCompileSdk = this.$options.compileSdk;
        if (userSpecifiedCompileSdk) {
            const androidCompileSdk = `${nativescript_doctor_1.androidToolsInfo.ANDROID_TARGET_PREFIX}-${userSpecifiedCompileSdk}`;
            if (!_.includes(installedTargets, androidCompileSdk)) {
                this.$errors.fail(`You have specified '${userSpecifiedCompileSdk}' for compile sdk, but it is not installed on your system.`);
            }
            return userSpecifiedCompileSdk;
        }
        return latestCompileSdk;
    }
    getTargetSdk(compileSdk) {
        const targetSdk = this.$options.sdk ? parseInt(this.$options.sdk) : compileSdk;
        this.$logger.trace(`Selected targetSdk is: ${targetSdk}`);
        return targetSdk;
    }
}
__decorate([
    decorators_1.cache()
], AndroidToolsInfo.prototype, "getToolsInfo", null);
__decorate([
    decorators_1.cache()
], AndroidToolsInfo.prototype, "validateAndroidHomeEnvVariable", null);
exports.AndroidToolsInfo = AndroidToolsInfo;
$injector.register("androidToolsInfo", AndroidToolsInfo);
