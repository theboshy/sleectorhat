"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class DeployController {
    constructor($deviceInstallAppService, $devicesService, $prepareController) {
        this.$deviceInstallAppService = $deviceInstallAppService;
        this.$devicesService = $devicesService;
        this.$prepareController = $prepareController;
    }
    deploy(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const { deviceDescriptors } = data;
            const executeAction = (device) => __awaiter(this, void 0, void 0, function* () {
                const deviceDescriptor = _.find(deviceDescriptors, dd => dd.identifier === device.deviceInfo.identifier);
                const prepareData = Object.assign({}, deviceDescriptor.buildData, { nativePrepare: { skipNativePrepare: !!deviceDescriptor.skipNativePrepare } });
                yield this.$prepareController.prepare(prepareData);
                const packageFilePath = yield deviceDescriptor.buildAction();
                yield this.$deviceInstallAppService.installOnDevice(device, Object.assign({}, deviceDescriptor.buildData, { buildForDevice: !device.isEmulator }), packageFilePath);
            });
            yield this.$devicesService.execute(executeAction, (device) => _.some(deviceDescriptors, deviceDescriptor => deviceDescriptor.identifier === device.deviceInfo.identifier));
        });
    }
}
exports.DeployController = DeployController;
$injector.register("deployController", DeployController);
