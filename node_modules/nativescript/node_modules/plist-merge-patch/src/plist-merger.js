"use strict";
exports.__esModule = true;
var _ = require("lodash");
var PlistMerger = (function () {
    function PlistMerger(console) {
        this.console = console;
    }
    PlistMerger.prototype.merge = function (base, patch) {
        var baseClone = _.cloneDeep(base);
        _.mergeWith(baseClone, patch, this.customizer.bind(this));
        return baseClone;
    };
    PlistMerger.prototype.mergeCFBundleURLTypes = function (baseValue, patchValue) {
        for (var _i = 0, patchValue_1 = patchValue; _i < patchValue_1.length; _i++) {
            var patchElement = patchValue_1[_i];
            var shouldAddToBase = true;
            for (var _a = 0, baseValue_1 = baseValue; _a < baseValue_1.length; _a++) {
                var baseElement = baseValue_1[_a];
                if (!patchElement.CFBundleTypeRole || !baseElement.CFBundleTypeRole) {
                    this.warn("Merging " + PlistMerger.CFBBUNDLEURLTYPES + ": Property CFBundleTypeRole is required!");
                }
                if (patchElement.CFBundleTypeRole === baseElement.CFBundleTypeRole) {
                    baseElement.CFBundleURLSchemes = baseElement.CFBundleURLSchemes.concat(patchElement.CFBundleURLSchemes);
                    shouldAddToBase = false;
                }
            }
            if (shouldAddToBase) {
                baseValue.push(patchElement);
            }
        }
        return baseValue;
    };
    PlistMerger.prototype.mergeLSApplicationQueriesSchemes = function (baseValue, patchValue) {
        var _loop_1 = function (patchElement) {
            if (!baseValue.some(function (x) { return x === patchElement; })) {
                baseValue.push(patchElement);
            }
        };
        for (var _i = 0, patchValue_2 = patchValue; _i < patchValue_2.length; _i++) {
            var patchElement = patchValue_2[_i];
            _loop_1(patchElement);
        }
        return baseValue;
    };
    PlistMerger.prototype.customizer = function (baseValue, patchValue, key) {
        if (key === PlistMerger.CFBBUNDLEURLTYPES && !!baseValue) {
            return this.mergeCFBundleURLTypes(baseValue, patchValue);
        }
        else if (key === PlistMerger.LSAPPLICATIONQUERIESSCHEMES && !!baseValue) {
            return this.mergeLSApplicationQueriesSchemes(baseValue, patchValue);
        }
        if (_.isArray(baseValue)) {
            return patchValue;
        }
    };
    PlistMerger.prototype.warn = function (msg) {
        if (this.console && this.console.warn) {
            this.console.warn(msg);
        }
    };
    PlistMerger.CFBBUNDLEURLTYPES = "CFBundleURLTypes";
    PlistMerger.LSAPPLICATIONQUERIESSCHEMES = "LSApplicationQueriesSchemes";
    return PlistMerger;
}());
exports.PlistMerger = PlistMerger;
//# sourceMappingURL=plist-merger.js.map