"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_service_1 = require("./helpers-service");
var devices_service_1 = require("./devices-service");
var constants_1 = require("../constants");
var device_platform_1 = require("../models/device-platform");
var PubNub = require("pubnub");
var preview_app_versions_service_1 = require("./preview-app-versions-service");
var app_content_manager_1 = require("./app-content-manager");
var MessagingService = /** @class */ (function () {
    function MessagingService() {
        this.helpersService = new helpers_service_1.HelpersService();
        this.devicesService = new devices_service_1.DevicesService(this.helpersService);
        this.previewAppVersionsService = new preview_app_versions_service_1.PreviewAppVersionsService();
        this.appContentManager = new app_content_manager_1.AppContentManager();
        this.connectedDevicesTimeouts = {};
    }
    MessagingService.prototype.initialize = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.config = config;
                        this.ensureValidConfig();
                        if (MessagingService.PubNubInitialized) {
                            return [2 /*return*/];
                        }
                        _a = this;
                        return [4 /*yield*/, this.previewAppVersionsService.getMinSupportedVersions(this.config.msvKey, this.config.msvEnv)];
                    case 1:
                        _a.minSupportedVersions = _b.sent();
                        this.pubNub = new PubNub({
                            publishKey: this.config.pubnubPublishKey,
                            subscribeKey: this.config.pubnubSubscribeKey,
                            ssl: true,
                            restore: true
                        });
                        this.pubNubListenerParams = {
                            presence: function (presenceEvent) {
                                _this.getConnectedDevicesDelayed(presenceEvent, 5000, 0);
                            },
                            message: function (data) {
                                if (data.message.type == "send files") {
                                    _this.handleSendInitialFiles(data, _this.config.instanceId, 0);
                                }
                                else if (data.message.type == "restart app") {
                                    _this.config.callbacks.onLogSdkMessage(_this.config.instanceId + " message received: restart app");
                                    _this.config.callbacks.onRestartMessage();
                                }
                                else if (data.message.type == "log message") {
                                    var deviceName = data.message.deviceName;
                                    if (!deviceName) {
                                        var senderDevice = _this.config.connectedDevices[data.publisher];
                                        if (senderDevice) {
                                            var deviceInfo = _this.devicesService.get(senderDevice);
                                            deviceName = deviceInfo.name;
                                        }
                                    }
                                    var logText = data.message.log;
                                    if (deviceName) {
                                        logText = "[" + deviceName + "]: " + logText;
                                    }
                                    _this.config.callbacks.onLogSdkMessage(_this.config.instanceId + " message received: log message " + logText);
                                    _this.config.callbacks.onLogMessage(data.message.log, deviceName, data.publisher);
                                }
                                else if (data.message.type == "uncaught error") {
                                    _this.config.callbacks.onLogSdkMessage(_this.config.instanceId + " message received: uncaught error");
                                    _this.config.callbacks.onUncaughtErrorMessage();
                                }
                                else if (data.message.type == "ack changes") {
                                    _this.config.callbacks.onLogSdkMessage(_this.config.instanceId + " message received: ack changes");
                                }
                                else if (data.message.type == "device connected") {
                                    var deviceConnectedMessage = data.message;
                                    _this.config.connectedDevices[data.publisher] = deviceConnectedMessage;
                                    _this.config.callbacks.onConnectedDevicesChange(_this.config.connectedDevices);
                                    _this.config.callbacks.onDeviceConnectedMessage(deviceConnectedMessage);
                                    _this.config.callbacks.onDeviceConnected(_this.devicesService.get(deviceConnectedMessage));
                                }
                            }
                        };
                        this.pubNub.addListener(this.pubNubListenerParams);
                        this.pubNubSubscribeParams = {
                            channels: [
                                this.getBrowserChannel(this.config.instanceId),
                                this.getDevicesChannel(this.config.instanceId) + "-pnpres"
                            ],
                            withPresence: true
                        };
                        this.pubNub.subscribe(this.pubNubSubscribeParams);
                        MessagingService.PubNubInitialized = true;
                        return [2 /*return*/, this.config.instanceId];
                }
            });
        });
    };
    MessagingService.prototype.stop = function () {
        if (MessagingService.PubNubInitialized) {
            this.pubNub.removeListener(this.pubNubListenerParams);
            this.pubNub.unsubscribe(this.pubNubSubscribeParams);
            this.pubNub.stop();
            MessagingService.PubNubInitialized = false;
            for (var uuid in this.connectedDevicesTimeouts) {
                clearTimeout(this.connectedDevicesTimeouts[uuid]);
            }
        }
    };
    MessagingService.prototype.applyChanges = function (instanceId, filesPayload, done) {
        this.sendFilesInChunks(this.getDevicesChannel(instanceId), "files chunk", filesPayload, filesPayload.deviceId)
            .then(function () { return done(null); })
            .catch(function (e) { return done(e); });
    };
    MessagingService.prototype.ensureValidConfig = function () {
        var _this = this;
        this.config.instanceId = this.config.instanceId || this.helpersService.shortId();
        this.config.connectedDevices = this.config.connectedDevices || {};
        this.config.getInitialFiles = this.config.getInitialFiles || (function () { return new Promise(function (resolve) { resolve({ files: [], platform: "" }); }); });
        this.config.callbacks = this.config.callbacks || {};
        this.config.callbacks.onConnectedDevicesChange = this.config.callbacks.onConnectedDevicesChange || (function () { });
        this.config.callbacks.onDeviceConnectedMessage = this.config.callbacks.onDeviceConnectedMessage || (function () { });
        this.config.callbacks.onDeviceConnected = this.config.callbacks.onDeviceConnected || (function () { });
        this.config.callbacks.onDevicesPresence = this.config.callbacks.onDevicesPresence || (function () { });
        this.config.callbacks.onLogMessage = this.config.callbacks.onLogMessage || (function () { });
        this.config.callbacks.onLogSdkMessage = this.config.callbacks.onLogSdkMessage || (function () { });
        this.config.callbacks.onRestartMessage = this.config.callbacks.onRestartMessage || (function () { });
        this.config.callbacks.onSendingChange = this.config.callbacks.onSendingChange || (function () { });
        this.config.callbacks.onUncaughtErrorMessage = this.config.callbacks.onUncaughtErrorMessage || (function () { });
        if (!this.config.pubnubPublishKey) {
            throw new Error("Pubnub publish key is required when creating a messaging service.");
        }
        if (!this.config.pubnubSubscribeKey) {
            throw new Error("Pubnub subscribe key is required when creating a messaging service.");
        }
        if (!this.config.callbacks.onBiggerFilesUpload) {
            throw new Error("onBiggerFilesUpload callback is required when creating a messaging service.");
        }
        if (!this.config.msvKey) {
            throw new Error("msvKey is required when getting min supported versions of preview apps. Valid values are: " + this.previewAppVersionsService.validMsvEnvs.join(", ") + ".");
        }
        if (!this.config.msvEnv) {
            throw new Error("msvEnv is required when getting min supported versions of preview apps. Valid values are: " + this.previewAppVersionsService.validMsvEnvs.join(", ") + ".");
        }
        if (!this.previewAppVersionsService.validMsvKeys.find(function (msvKey) { return _this.helpersService.areCaseInsensitiveEqual(msvKey, _this.config.msvKey); })) {
            throw new Error("Invalid msvKey " + this.config.msvKey + ". Valid values are: " + this.previewAppVersionsService.validMsvEnvs.join(", ") + ".");
        }
        if (!this.previewAppVersionsService.validMsvEnvs.find(function (env) { return _this.helpersService.areCaseInsensitiveEqual(env, _this.config.msvEnv); })) {
            throw new Error("Invalid msvEnv " + this.config.msvEnv + ". Valid values are: " + this.previewAppVersionsService.validMsvEnvs.join(", ") + ".");
        }
    };
    MessagingService.prototype.sendInitialFiles = function (instanceId, hmrMode) {
        this.handleSendInitialFiles({}, instanceId, 0, true, hmrMode);
    };
    MessagingService.prototype.getConnectedDevices = function (instanceId) {
        var _this = this;
        var devicesChannel = this.getDevicesChannel(instanceId);
        return new Promise(function (resolve, reject) {
            var request = {
                channels: [devicesChannel],
                includeUUIDs: true,
                includeState: true
            };
            _this.pubNub.hereNow(request, function (status, response) {
                if (status && status.error) {
                    return reject();
                }
                if (!response || !response.channels || response.totalChannels < 1) {
                    _this.config.callbacks.onDevicesPresence([]);
                    return resolve([]);
                }
                var channelInfo = response.channels[devicesChannel];
                if (!channelInfo) {
                    _this.config.callbacks.onDevicesPresence([]);
                    return resolve([]);
                }
                var occupants = channelInfo.occupants || [];
                var deviceIds = occupants
                    .filter(function (x) { return typeof x.uuid != "undefined" && x.uuid != null; })
                    .map(function (x) { return x.uuid; });
                if (!deviceIds || deviceIds.length < 1) {
                    _this.config.callbacks.onDevicesPresence([]);
                    return resolve([]);
                }
                var devices = deviceIds
                    .map(function (id) { return _this.config.connectedDevices[id]; })
                    .filter(function (x) { return typeof x != "undefined" && x != null; })
                    .map(function (x) { return _this.devicesService.get(x); })
                    .sort(function (d1, d2) {
                    if (d1.model < d2.model) {
                        return -1;
                    }
                    else if (d1.model > d2.model) {
                        return 1;
                    }
                    return 0;
                });
                _this.config.callbacks.onDevicesPresence(devices);
                return resolve(devices);
            });
        });
    };
    // TODO: check on CLI livesync as we don't have control on file upload
    MessagingService.prototype.exceedsMaximumTreeSize = function (additionalFiles) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.config.getInitialFiles().then(function (initialPayload) {
                var files = initialPayload.files.concat(additionalFiles || []);
                var chunks = _this.getChunks(files);
                resolve(chunks.length > 650);
            });
        });
    };
    MessagingService.prototype.sendFilesInChunks = function (channel, messageType, filesPayload, deviceIdMeta) {
        var _this = this;
        var finalFilesPayload = this.getFinalFilesPayload(filesPayload);
        var chunks = this.getChunks(finalFilesPayload);
        this.config.callbacks.onSendingChange(true);
        return new Promise(function (resolve, reject) {
            _this.getPublishPromise(channel, messageType, chunks, deviceIdMeta, filesPayload.platform, filesPayload.hmrMode)
                .then(function () {
                _this.config.callbacks.onSendingChange(false);
                resolve({ error: false });
            })
                .catch(function (err) {
                _this.config.callbacks.onSendingChange(false);
                reject(err);
            });
        });
    };
    MessagingService.prototype.getFinalFilesPayload = function (filesPayload) {
        var finalFiles = filesPayload.files;
        var appPackageJson = finalFiles.find(function (filePayload) { return filePayload.file === "package.json"; });
        if (appPackageJson) {
            var jsonContent = JSON.parse(appPackageJson.fileContents);
            jsonContent.android = jsonContent.android || {};
            jsonContent.android.forceLog = true;
            appPackageJson.fileContents = JSON.stringify(jsonContent);
        }
        return finalFiles;
    };
    MessagingService.prototype.getPublishPromise = function (channel, messageType, chunks, deviceIdMeta, platform, hmrMode) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!chunks.length) {
                return resolve();
            }
            var meta = _this.getPubNubMetaData(deviceIdMeta, platform, hmrMode);
            if (chunks.length === 1) {
                _this.pubNub.publish({
                    message: {
                        "type": messageType,
                        "id": chunks[0].id,
                        "index": chunks[0].index,
                        "total": chunks[0].total,
                        "data": chunks[0].data
                    },
                    channel: channel,
                    meta: meta
                }, function (status, response) {
                    if (status.error) {
                        reject(status);
                    }
                    else {
                        resolve();
                    }
                });
            }
            else {
                var data = chunks.map(function (chunk) { return chunk.data; });
                _this.pubNub.publish({
                    message: { "type": "large session" },
                    channel: channel,
                    meta: meta
                });
                _this.config.callbacks.onBiggerFilesUpload(data.join(""), function (uploadedFilesLocation, error) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        _this.pubNub.publish({
                            message: {
                                "type": messageType,
                                "remoteDataUrl": uploadedFilesLocation
                            },
                            channel: channel,
                            meta: meta
                        }, function (status) {
                            if (status.error) {
                                reject(status.error);
                            }
                            else {
                                resolve();
                            }
                        });
                    }
                });
            }
        });
    };
    MessagingService.prototype.getPubNubMetaData = function (deviceIdMeta, targetPlatform, hmrMode) {
        if (targetPlatform === void 0) { targetPlatform = device_platform_1.DevicePlatform.All; }
        var meta = {
            msvi: this.minSupportedVersions.ios,
            msva: this.minSupportedVersions.android,
            platform: targetPlatform
        };
        if (deviceIdMeta) {
            meta = {
                msvi: Number.MAX_SAFE_INTEGER,
                msva: Number.MAX_SAFE_INTEGER,
                di: deviceIdMeta,
                platform: targetPlatform
            };
        }
        if (hmrMode === 0 || hmrMode === 1) {
            meta.hmrMode = hmrMode;
        }
        return meta;
    };
    MessagingService.prototype.getChunks = function (payload) {
        var serializedPayload = JSON.stringify(payload);
        var base64Encoded = this.helpersService.base64Encode(serializedPayload);
        var parts = base64Encoded.match(/.{1,30000}/g);
        var chunks = [];
        var id = this.helpersService.shortId();
        parts.forEach(function (part, index) {
            chunks.push({
                id: id,
                index: index,
                total: parts.length,
                data: part
            });
        });
        return chunks;
    };
    MessagingService.prototype.handleSendInitialFiles = function (data, instanceId, retries, skipDeviceCheck, hmrMode) {
        if (skipDeviceCheck === void 0) { skipDeviceCheck = false; }
        return __awaiter(this, void 0, void 0, function () {
            var device, devicesChannel, deviceConnectedMessage, isAndroid, minimumSupportedVersion, showDeprecatedPage, payloads, initialPayload;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        device = null;
                        if (retries > 10) {
                            this.config.callbacks.onLogSdkMessage(instanceId + " Exception: didn't receive device connected message after " + retries + " retries");
                            return [2 /*return*/];
                        }
                        devicesChannel = this.getDevicesChannel(instanceId);
                        if (!!skipDeviceCheck) return [3 /*break*/, 3];
                        deviceConnectedMessage = this.config.connectedDevices[data.publisher];
                        if (!deviceConnectedMessage) {
                            setTimeout(function () { return _this.handleSendInitialFiles(data, instanceId, ++retries, false, hmrMode); }, 1000);
                            return [2 /*return*/];
                        }
                        device = this.devicesService.get(deviceConnectedMessage);
                        isAndroid = this.helpersService.areCaseInsensitiveEqual(device.platform, "android");
                        minimumSupportedVersion = isAndroid ? this.minSupportedVersions.android : this.minSupportedVersions.ios;
                        showDeprecatedPage = !deviceConnectedMessage.version || !deviceConnectedMessage.platform || deviceConnectedMessage.version < minimumSupportedVersion;
                        if (!showDeprecatedPage) return [3 /*break*/, 2];
                        payloads = this.appContentManager.getDeprecatedAppPayloads(this.config.previewAppStoreId, this.config.previewAppGooglePlayId);
                        return [4 /*yield*/, this.showPage(devicesChannel, device, payloads, { hmrMode: hmrMode, publisher: data.publisher })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        this.config.callbacks.onLogSdkMessage(instanceId + " message received: send files");
                        _a.label = 3;
                    case 3: return [4 /*yield*/, this.config.getInitialFiles(device)];
                    case 4:
                        initialPayload = _a.sent();
                        if (!(initialPayload && initialPayload.files && initialPayload.files.length)) return [3 /*break*/, 6];
                        if (!initialPayload.deviceId && device) {
                            initialPayload.deviceId = device.id;
                        }
                        if (initialPayload.hmrMode === undefined || initialPayload.hmrMode === null) {
                            initialPayload.hmrMode = hmrMode;
                        }
                        return [4 /*yield*/, this.sendFilesInChunks(devicesChannel, constants_1.Constants.InitialSyncMessageType, initialPayload, initialPayload.deviceId)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    MessagingService.prototype.getConnectedDevicesDelayed = function (presenceEvent, delay, retryCount) {
        var _this = this;
        this.connectedDevicesTimeouts[presenceEvent.uuid] = setTimeout(function () {
            if (!_this.helpersService.isBrowserTabActive()) {
                //Page not visible, retrying in 2 seconds
                return _this.getConnectedDevicesDelayed(presenceEvent, 2000, retryCount);
            }
            _this.getConnectedDevices(_this.config.instanceId).then(function (devices) {
                var shouldRetry = !(devices || []).find(function (d) { return d.id == presenceEvent.uuid; }) &&
                    presenceEvent.action &&
                    _this.helpersService.areCaseInsensitiveEqual("join", presenceEvent.action) &&
                    presenceEvent.channel &&
                    !presenceEvent.channel.startsWith("b-");
                if (shouldRetry && retryCount < 5) {
                    _this.getConnectedDevicesDelayed(presenceEvent, 1000 * (retryCount + 1), ++retryCount);
                }
            });
        }, delay);
    };
    MessagingService.prototype.showPage = function (devicesChannel, device, files, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var payload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        payload = {
                            files: files,
                            hmrMode: opts.hmrMode,
                            platform: device.platform,
                            deviceId: device.id
                        };
                        return [4 /*yield*/, this.sendFilesInChunks(devicesChannel, constants_1.Constants.InitialSyncMessageType, payload, opts.publisher)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MessagingService.prototype.getDevicesChannel = function (instanceId) {
        return "m-ch-" + instanceId;
    };
    MessagingService.prototype.getBrowserChannel = function (instanceId) {
        return "b-ch-" + instanceId;
    };
    MessagingService.PubNubInitialized = false;
    return MessagingService;
}());
exports.MessagingService = MessagingService;
