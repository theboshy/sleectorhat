"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var fs_1 = require("fs");
var index_1 = require("./index");
var security_find_certificate_1 = require("./parsers/security-find-certificate");
var security_find_identity_1 = require("./parsers/security-find-identity");
var chai = require("chai");
var spies = require("chai-spies");
var chai_1 = require("chai");
chai.use(spies);
function printProfile(profile) {
    console.log(" - " + profile.Name + " (" + profile.TeamName + ") " + profile.Entitlements["application-identifier"] + " " + profile.Type + " " + profile.UUID);
}
function printEligable(result) {
    console.log("eligable:");
    result.eligable.forEach(printProfile);
}
function printNonEligable(result) {
    console.log("non eligable:");
    result.nonEligable.forEach(printProfile);
}
function print(result) {
    printEligable(result);
    printNonEligable(result);
}
// These run end to end tests and run security tool and depend on the keychain, they will run only on mac. Consider running them during development.
describe.skip("api", function () {
    describe("certificates", function () {
        it("list all", function () {
            var result = index_1.cert.read();
        });
    });
    describe("provisioning profiles", function () {
        it("lists all", function () {
            var result = index_1.provision.read();
        });
        it("filters by team", function () {
            var result = index_1.provision.select(index_1.provision.read(), {
                TeamName: "Telerik AD"
            });
        });
        it("filters by app id", function () {
            var result = index_1.provision.select(index_1.provision.read(), {
                AppId: "org.nativescript.CertTest2"
            });
        });
        it("filters by app id and team id", function () {
            var result = index_1.provision.select(index_1.provision.read(), {
                AppId: "org.nativescript.CertTest2",
                TeamName: "Telerik AD"
            });
        });
        it("filters by app id, team id and device", function () {
            var result = index_1.provision.select(index_1.provision.read(), {
                AppId: "org.nativescript.CertTest2",
                TeamName: "Telerik AD",
                ProvisionedDevices: ["d97ff43f5d13677a2fb09fc9b4da3066464ff5f4"]
            });
        });
        it("find distribution profile", function () {
            var all = index_1.provision.read();
            var result = index_1.provision.select(all, {
                AppId: "org.nativescript.examples",
                TeamName: "Telerik AD"
            });
        });
    });
    describe("integrated", function () {
        it("can find valid provision", function () {
            var certificates = index_1.cert.read();
            var provisionProfiles = index_1.provision.read();
            var result = index_1.provision.select(provisionProfiles, {
                AppId: "org.nativescript.examples",
                TeamName: "Telerik AD",
                Certificates: certificates.valid
            });
        });
    });
});
describe("security find-identity parse", function () {
    it("none", function () {
        var result = security_find_identity_1.parse(fs.readFileSync("./tests/find-identity/none-found.txt").toString());
        chai_1.assert.deepEqual({ policy: 'Code Signing', matching: [], valid: [] }, result);
    });
    it("some", function () {
        var result = security_find_identity_1.parse(fs.readFileSync("./tests/find-identity/some-found.txt").toString());
        chai_1.assert.deepEqual({ policy: 'Code Signing',
            matching: [{ hash: '9D591A6ADAF9C99A9C19FC1A8EE7FA153C613441',
                    name: 'iPhone Distribution: Telerik AD' },
                { hash: 'FAE6210D184FCC1707B87F1C582280A286898EE3',
                    name: 'iPhone Distribution: Telerik A D (CHSQ3M3P37)' },
                { hash: '0F0077D3EBEA9D0AB6668B8BCB90152ACE7BA4E9',
                    name: 'iPhone Developer: Panayot Cankov (TT4M4FMX2A)',
                    issue: 'CSSMERR_TP_CERT_REVOKED' },
                { hash: '9354FAEF631DC3E9B07929F20991829FF5E21C36',
                    name: 'iPhone Developer: Panayot Cankov (TT4M4FMX2A)' },
                { hash: '89936062DD52C7FEF2273E677AC98D109F198A84',
                    name: 'iPhone Developer: Panayot Cankov (3KZR3BE4ZD)',
                    issue: 'CSSMERR_TP_CERT_REVOKED' },
                { hash: '07AB20E16C86E2B548A91920B83EC27D78AFC7EB',
                    name: 'iPhone Developer: Panayot Cankov (3KZR3BE4ZD)' }],
            valid: [{ hash: '9D591A6ADAF9C99A9C19FC1A8EE7FA153C613441',
                    name: 'iPhone Distribution: Telerik AD' },
                { hash: 'FAE6210D184FCC1707B87F1C582280A286898EE3',
                    name: 'iPhone Distribution: Telerik A D (CHSQ3M3P37)' },
                { hash: '0F0077D3EBEA9D0AB6668B8BCB90152ACE7BA4E9',
                    name: 'iPhone Developer: Panayot Cankov (TT4M4FMX2A)',
                    issue: 'CSSMERR_TP_CERT_REVOKED' },
                { hash: '9354FAEF631DC3E9B07929F20991829FF5E21C36',
                    name: 'iPhone Developer: Panayot Cankov (TT4M4FMX2A)' },
                { hash: '89936062DD52C7FEF2273E677AC98D109F198A84',
                    name: 'iPhone Developer: Panayot Cankov (3KZR3BE4ZD)',
                    issue: 'CSSMERR_TP_CERT_REVOKED' },
                { hash: '07AB20E16C86E2B548A91920B83EC27D78AFC7EB',
                    name: 'iPhone Developer: Panayot Cankov (3KZR3BE4ZD)' }]
        }, result);
    });
});
describe("security find-certificate parse", function () {
    it("some", function () {
        var result = security_find_certificate_1.parse(fs.readFileSync("./tests/find-certificate/some-found.txt").toString());
        var expected = JSON.parse(fs.readFileSync("./tests/find-certificate/some-found.expected.json").toString());
        chai_1.assert.deepEqual(result, expected);
    });
    it("macOS Catalina, SHA256 in security output", function () {
        var result = security_find_certificate_1.parse(fs.readFileSync("./tests/find-certificate/some-found-security-macos-catalina.txt").toString());
        var expected = JSON.parse(fs.readFileSync("./tests/find-certificate/some-found-security-macos-catalina.expected.json").toString());
        chai_1.assert.deepEqual(result, expected);
    });
});
describe("provision", function () {
    it("looks at the default path", function () {
        var fs = {
            readdirSync: function (dir) {
                chai_1.assert(dir.endsWith("Library/MobileDevice/Provisioning Profiles/"));
                return [];
            },
            readFileSync: function (path) { return null; }
        };
        var spy = chai.spy(fs.readdirSync);
        fs.readdirSync = spy;
        index_1.provision.read(fs);
        chai.expect(spy).called.exactly(1);
    });
    var testfsMac1;
    before(function () {
        testfsMac1 = {
            readdirSync: function (dir) {
                return fs_1.readdirSync("./tests/provisioning/mac1/");
            },
            readFileSync: function (filePath) {
                return fs_1.readFileSync(path.join("./tests/provisioning/mac1", path.basename(filePath)));
            }
        };
    });
    it("read the plist files from the plists directory", function () {
        var profiles = index_1.provision.read(testfsMac1);
        chai_1.assert.equal(profiles.length, 2);
        var first = profiles[0];
        chai_1.assert.equal(first.TeamName, "Telerik A D");
        chai_1.assert.equal(first.UUID, "3aa58a65-f8da-4c67-ZZZZ-ZZZZZZZZZZZZ");
        chai_1.assert.equal(first.Type, "Development");
        chai_1.assert.deepEqual(first.TeamIdentifier, ["CHSQ3M3P37"]);
        chai_1.assert.equal(first.ProvisionedDevices.length, 80);
        chai_1.assert(first.ProvisionedDevices.some(function (udid) { return udid === "c0f5ffad********************************"; }));
        chai_1.assert(first.DeveloperCertificates.some(function (cert) { return cert.toString().startsWith("MIIFmTCCBIGgAwIBAgIICS/7/s0P8fMwDQYJKoZIhvcNAQELBQAwgZYxCzAJ"); }));
        var second = profiles[1];
        chai_1.assert.equal(second.TeamName, "Telerik AD");
        chai_1.assert.equal(second.UUID, "bb53a533-e88d-470f-ZZZZ-ZZZZZZZZZZZZ");
        chai_1.assert.equal(second.Type, "Development");
        chai_1.assert.deepEqual(second.TeamIdentifier, ["W7TGC3P93K"]);
        chai_1.assert.equal(second.ProvisionedDevices.length, 59);
        chai_1.assert(second.ProvisionedDevices.some(function (udid) { return udid === "d39c73c7********************************"; }));
        chai_1.assert(second.DeveloperCertificates.some(function (cert) { return cert.toString().startsWith("MIIFmDCCBICgAwIBAgIIcZcoImBSvQcwDQYJKoZIhvcNAQELBQAwgZYxCzAJ"); }));
    });
    it("can find profiles for devices", function () {
        var profiles = index_1.provision.read(testfsMac1);
        var result = index_1.provision.select(profiles, {
            ProvisionedDevices: ["c0f5ffad********************************"]
        });
        chai_1.assert.equal(result.eligable.length, 1);
        chai_1.assert.equal(result.eligable[0].UUID, "3aa58a65-f8da-4c67-ZZZZ-ZZZZZZZZZZZZ");
        chai_1.assert.equal(result.nonEligable.length, 1);
    });
    it("can find profiles for certificate", function () {
        var profiles = index_1.provision.read(testfsMac1);
        var result = index_1.provision.select(profiles, {
            Certificates: [{ pem: "MIIFmDCCBICgAwIBAgIIcZcoImBSvQcwDQYJKoZIhvcNAQELBQAwgZYxCzAJ" }]
        });
        chai_1.assert.equal(result.eligable.length, 1);
        chai_1.assert.equal(result.eligable[0].UUID, "bb53a533-e88d-470f-ZZZZ-ZZZZZZZZZZZZ");
        chai_1.assert.equal(result.nonEligable.length, 1);
    });
    it("can find profiles by app id", function () {
        var profiles = index_1.provision.read(testfsMac1);
        var result1 = index_1.provision.select(profiles, {
            AppId: "org.nativescript.examples"
        });
        chai_1.assert.equal(result1.eligable.length, 2);
        chai_1.assert.equal(result1.nonEligable.length, 0);
    });
    // This test need to be added in future.
    it("can find profile by app-id, device udid and certificate");
    it("unique filters duplicates");
});
//# sourceMappingURL=test.js.map